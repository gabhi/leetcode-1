/*
// Rounding

// http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=146539&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3046%5D%5Bvalue%5D%3D37%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

// Given an array of numbers A = [x1, x2, ..., xn] and T = Round(x1+x2+... +xn). -google 1point3acres
// We want to find a way to round each element in A such that after rounding we get a new array B = [y1, y2, ...., yn] such that y1+y2+...+yn = T where  yi = Floor(xi) or Ceil(xi), ceiling or floor of xi.
// We also want to minimize sum |x_i-y_i|. 1point 3acres 
*/

import java.util.*;

class Rounding {

  public int[] Temp2 ( double[] inputs ) {
    double sum = 0;
    int sumOfRound = 0; 
    List< Double > list = new ArrayList <>();
    for ( double d : inputs ) {
      sum += d; 
      sumOfRound += (int)Math.round( d );
      list.add(d); 
    }
    int roundOfSum = (int) Math.round( sum );
    int diff = roundOfSum - sumOfRound;
    boolean over = true;
   
    if ( diff >= 0 ) { 
      Collections.sort( list , new CPP() );      
    } else {
      Collections.sort( list , new CPN() );
      over = false;
    }
    diff = (int)Math.abs( diff );
   
    Set< Double > set = new HashSet< Double >();
    for ( int i = 0; i < diff; ++i ) {
      set.add( list.get(i) );
    }
    int[] res = new int[ inputs.length ];
    for ( int i = 0; i < res.length; ++i  ) {
      double d = inputs[i];
      int rounded = (int)Math.round( d ); 
      if ( set.contains(d) && diff > 0 ) {
        if ( over ) {
          ++rounded;          
        } else {
          --rounded;
        }
        --diff;
      }
      res[i] = rounded;
    }
    return res;    
  } 

  public static void main(String[] args) {
    Rounding s = new Rounding();
    double[][] inputs = { { 1.2 , 1.9 , 1.8 },
                         {1.2,1.3,1.1 },
                         {1.2 ,1.2,1.2},
                         { 1.6 ,1.6 ,1.6 } };
    for ( double [] in : inputs ) {                  
      for ( int i : s.Rounding( in )  ) {
        System.out.print( i + " " );
      }
      System.out.println();
      System.out.println("[info] ");
    }
  }
}

class CPP implements Comparator< Double > {
  public int compare( Double d1 , Double d2 ) {	
    return Double.compare(d2 - Math.floor(d2), d1 - Math.floor(d1));
  }
}

class CPN implements Comparator< Double > {
  public int compare( Double d1 , Double d2 ) {
    return Double.compare(d1 - Math.floor(d1), d2 - Math.floor(d2));
  }
}

